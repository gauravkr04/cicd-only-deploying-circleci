
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0

jobs:  
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
       #   get-rollout-status: true
          resource-file-path: deployment.json
          resource-name: deployment/blue
  create-service:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: service.json
          resource-name: service/bluegreenlb
  create-project-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
          
  test-capstone-app:
      executor: aws-eks/python3

      steps:
        - kubernetes/install
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: udacity-devops-cluster
            install-kubectl: true
            aws-region: $AWS_DEFAULT_REGION         
        - run:
              name: Test Blue APP
              command: |
                kubectl delete pod blue-549fb89566-wckhp
                kubectl delete pod blue-5b5d86f455-6pb48
                echo "My deployments"
                kubectl get deployments -o wide
                echo  "******************************"
                echo "My services"
                kubectl get services -o wide
                echo  "******************************"
                echo "My pods"
                kubectl get pods -o wide --show-labels
                echo  "******************************"
                echo "My service - blue"
                kubectl describe svc blue -n default
                echo  "******************************"
                echo "Check the service traffic policy and cluster security groups for issues with Application Load Balancers"
                kubectl get svc blue -n default -o=jsonpath='{.spec.externalTrafficPolicy}{"\n"}'
                echo  "******************************"
                echo "Verify that your service is configured for targetPort"
                kubectl get svc blue -n default -o=jsonpath="{.items[*]}{.metadata.name}{'\t'}{.spec.ports[].targetPort}{'\t'}{.spec.ports[].protocol}{'\n'}"

  delete-capston-cluster:
      executor: aws-eks/python3
      steps:
        - checkout
        - aws-eks/install-aws-iam-authenticator:
            release-tag: ''
        - run:
            name: Install the eksctl tool
            command: |
              if which eksctl > /dev/null; then
                echo "eksctl is already installed"
                exit 0
              fi
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
                | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
              fi
              $SUDO mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download        
    
        - aws-eks/delete-cluster:
            cluster-name: udacity-housing-cluster
            aws-region: $AWS_DEFAULT_REGION
            wait: true


workflows:
  deployment:
    jobs:
      #- create-project-cluster:
      #    cluster-name: udacity-devops-cluster
      - create-service:
          cluster-name: udacity-devops-cluster
      #    requires:
      #      - create-project-cluster
      #- create-deployment:
      #    cluster-name: udacity-devops-cluster
      #    requires:
      #      - create-service
      #- aws-eks/update-container-image:
      #    cluster-name: udacity-devops-cluster
      #    container-image-updates: 'blue=gauravkr04/udacityblue'
      #    record: true
      #    requires:
      #      - create-deployment
      #    resource-name: deployment/blue
      - test-capstone-app
      #    requires: 
      #      - aws-eks/update-container-image
      #- delete-capston-cluster
          
